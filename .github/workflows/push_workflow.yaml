name: Build & Deploy to Azure
on:
  push:
    branches:
      - develop
env:
  AZURE_REGISTRY_USERNAME: ${{secrets.AZURE_REGISTRY_USERNAME}}
  AZURE_REGISTRY_PASSWORD: ${{secrets.AZURE_REGISTRY_PASSWORD}}
  AZURE_REGISTRY: ${{secrets.AZURE_REGISTRY}}
  REPO_NAME: ${{secrets.REPO_NAME}}
  AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
  AZURE_CLUSTER_URL: ${{secrets.AZURE_CLUSTER_URL}}
  AZURE_CLUSTER_TOKEN: ${{secrets.AZURE_CLUSTER_TOKEN}}
  APP_NAME: ${{secrets.APP_NAME}}
  MODE_NAME: "dev"
  DOMAIN: ${{secrets.DOMAIN}}
  DB_NAME: ${{secrets.DEV_DB_NAME}}
  DB_USER: ${{secrets.DEV_DB_USER}}
  DB_PASSWORD: ${{secrets.DEV_DB_PASSWORD}}
  DB_HOST: ${{secrets.DEV_DB_HOST}}
  DB_PORT: ${{secrets.DEV_DB_PORT}}
  DB_SSLMODE: ${{secrets.DEV_DB_SSLMODE}}
  DB_TIMEZONE: ${{secrets.DEV_DB_TIMEZONE}}
  ADAREACH_URL: ${{secrets.DEV_ADAREACH_URL}}
  ADAREACH_USERNAME: ${{secrets.DEV_ADAREACH_USERNAME}}
  ADAREACH_PASSWORD: ${{secrets.DEV_ADAREACH_PASSWORD}}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ env.AZURE_REGISTRY }}/${{env.REPO_NAME}}-${{env.MODE_NAME}}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          username: ${{env.AZURE_REGISTRY_USERNAME}}
          password: ${{ env.AZURE_REGISTRY_PASSWORD }}
          registry: ${{ env.AZURE_REGISTRY }}
      - name: Build & Push Actions
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
        id: repo
        run: echo "::set-output name=repo_name::${{ env.AZURE_REGISTRY }}/${{env.REPO_NAME}}-${{env.MODE_NAME}}:sha-${GITHUB_SHA::8}" # we are setting the image location as output to be used in later step
      - name: Check Repo Location
        run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
      - name: Install Kubectl
        uses: azure/setup-kubectl@v1
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
      - uses: azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{env.AZURE_CLUSTER_URL}}
          k8s-secret: ${{env.AZURE_CLUSTER_TOKEN}}
        id: setcontext
      - name: Install Helm # helm installation in our runner for deploying.
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version
      - name: Delete jobs
        run: |
          kubectl delete jobs --all --all-namespaces
          kubectl get pods --all-namespaces --field-selector 'status.phase==Failed' -o json | kubectl delete -f -
      - name: Install chart
        run: >
          helm upgrade
          --install
          --set NAME="${{env.APP_NAME}}"
          --set IMAGE_NAME="${{steps.repo.outputs.repo_name}}"
          --set NAMESPACE_NAME="${{env.MODE_NAME}}"
          --set MODE="${{env.MODE_NAME}}"
          --set SECRETS.DB_NAME="${{env.DB_NAME}}"
          --set SECRETS.DB_USER="${{env.DB_USER}}"
          --set SECRETS.DB_PASSWORD="${{env.DB_PASSWORD}}"
          --set SECRETS.DB_HOST="${{env.DB_HOST}}"
          --set SECRETS.DB_PORT="${{env.DB_PORT}}"
          --set SECRETS.DB_SSLMODE="${{env.DB_SSLMODE}}"
          --set SECRETS.DB_TIMEZONE="${{env.DB_TIMEZONE}}"
          --set SECRETS.ADAREACH_URL="${{env.ADAREACH_URL}}"
          --set SECRETS.ADAREACH_USERNAME="${{env.ADAREACH_USERNAME}}"
          --set SECRETS.ADAREACH_PASSWORD="${{env.ADAREACH_PASSWORD}}"
          --wait
          --atomic
          ${{env.APP_NAME}}-${{env.MODE_NAME}}-chart
          ./k8s
      - name: Install istio charts
        run: >
          helm upgrade
          --install
          --set NAME="${{env.APP_NAME}}"
          --set MODE="${{env.MODE_NAME}}"
          --set DOMAIN="${{env.DOMAIN}}"
          --wait
          --atomic
          ${{env.MODE_NAME}}-istio-charts
          ./istio-charts
      - name: Check pods # checking pod list to see if they are running.
        run: |
          kubectl get pods --all
          kubectl get services --all
          kubectl get vs --all